NOVA 2018
~~~

#noteletext #justrasters
Maybe a demo for NOVA 2018 :)

Have <=10 weeks in theory until 23 June 2018
Bound to lose some of these to work & RL etc.
Need to commit to doing this by April 28 (2 weeks)
Aim to complete the demo by May 9 (6 weeks)
Giving 2 weeks buffer and chance to test etc.

Obvious place to start is raster timed FX from last year
Would like to do 3D (especially w/ co-pro) but not enough
time to explore this properly (save to next year)

Have some FX already written (many not seen on Beeb before):
1/ Kefrens bars
2/ Parallax bars
3/ Horizontal bars
4/ Twister

Additional FX that could be "quickly" written in theory:
5/ Checkboard zoom or wibble
6/ Static text/image raster stretch (32x32)
7/ Raster scrolltext?

Theme could be #noteletext to riff on idea that Beeb
can only do Teletext FX.

So start with Teletext as per Teletextr then switch
to raster FX. #justrasters

As always, keep it snappy so each FX just 30 seconds
ideally with 3x variations on the FX for 10 seconds each
Need some quick & easy way of intro'ing each part

- 20s (max) #noteletext #justrasters intro
- 30s for each FX x4-6
- 20s (max) outro & credits

Aim for 3m30s maximum :)

Assume Master only so can use SWRAM and SHADOW
As per Teletextr, preload all FX into SWRAM first
Don't forget we now understand ANDY & HAZEL better!

TO DO to get to commitment
~~~
1. Need to prove enough time to run music w/out events - DONE
    - Hack vgmplayer into Kefrens bars in our vsync

2. Need to be able to switch between FX - DONE
    - Simple framework for sequencing the parts - DONE
      Do vsync in main loop and call render fn in FX module
      Main loop also resets CRTC cycle to standard values?

    - Initialise fn for setting up frame buffers before FX - DONE
      Use pucrunch to decompress from SWRAM? (Size check!)
      How to keep the music going between FX here? (Figure out later)

    - Frame counter in main loop to control sequence - DONE
      Kill previous FX module (is kill fn needed?)
      Initialise new FX module (before first tick)
      Switch FX params (or trigger next variation)

To complete the demo
~~~
1. Each FX needs to look a lot nicer!
2. Each FX needs 3x variants (ideally)
3. Need custom music from IP
4. Need intro (w/ Teletext?)
5. Need outro (w/ Teletext?)
6. Need some way of introducing the parts
7. Timing & polish

What is the most impressive FX to finish on?!?


TO DO
~~~
. Move music out of Core RAM - put in SWRAM for now (leave ANDY & HAZEL?) - DONE
. Move Kefrens module to SWRAM - leave expanded codegen to begin with - DONE
. Port another FX module into framework - Twister? - DONE
. System for switching between FX - leave music broken for now! - DONE
. Establish what the default machine state is between FX - DONE
  . what can be assumed and doesn't need to be initialised
  . and what needs to be put back on FX kill
  . fix crud left on screen by Parallax etc.
. Come up with standard approach to hiding any CRTC glitches during FX init - DONE
  . blank screen with CRTC registers going to be tough as part of setup!
  . display blank SHADOW screen - what if FX needs to copy to SHADOW?
  . use palette to blackout?
. Check timing of ULA palette switch in rotbox - DONE
  . should we move to scanline -1 start (or just hblank?)
. Check SHADOW RAM usage in Parallax - DONE
  . what ACCON state should be expected between FX?

. Fix audio glitch during long init - see following
. Decompress screen data from SWRAM - preconvert Twister & Parallax to 
. Decompress generated code from SWRAM - establish guaranteed space in CORE
  
For switching between FX it's probably OK to reenable interupts & run the vgm_player
on an event. Just need to re-vsync after initialising the next part - DONE
-> or actually, make init fn responsible for polling music player after vsyncs
can provide standard memory move and or decompress fns with this included - TODO

OK, propose that initialisation expectation is:

- CRTC and Video ULA set to MODE 2, SHEILA = &F4 
- ULA palette set to default (no flash) ??
- Single buffered with main memory paged in and displayed, so ACCON & 5 = 0
- Screen buffer may be garbage so set this up as required (most FX copying into buffer anyway)

Checkerboard
~~~
Options:
. Precompute checker pattern for 32x32 squares shifted by 1 pixel each
  . Set frame buffer address per scanline - allows wibble effect
  . Flip colours every 32 scanline using ULA flash bit
  . Flip colours when x offset > 32 in same way
  . Would sort out timing on scanline -1
  . Would implement decompress from SWRAM to screen buffer

. Draw black & white pixels into single scanline buffer as per Kefrens
  . No wibble as all scanlines will have to be vertically aligned
  . But could allow zoom at same time as scroll
  . Flip colours every N scanlines using ULA flash bit
  . MODE 4

Now generated byte spans for N pixels at offsets 0-7
X DIV N gives odd or even checker
X MOD N gives offset into checker
(X MOD N) MOD 8 gives which pixel offset table to use
(X MOD N) DIV 8 gives byte offset to start in data

For long lines
Always start with byte 0 so pixel offset of 0
Drawing >= 8 pixels
N - (X MOD N) is number of pixels to start with

18/4/2018
~~~
General raster ideas:
Logo with static: https://youtu.be/XJKDb4ByZ7Y?t=21s
Scrolltext per character row all at different speeds: https://youtu.be/XJKDb4ByZ7Y?t=41s
Interference by displaying circle pattern on alternate scanlines in different colours?
Bring logo/screens on in horizontal slices
VRUP screen into four & pulse on channel beats
Copper colour hue with ordered dither
- Don't forget horizontal dither in MODE 0 looks really nice
  could wibble & blend this between different colours

Twist:
Old venetian blind effect (vbars v8)
Silents bars: https://www.youtube.com/watch?v=l23miRWH5_Y&feature=youtu.be&t=7m2s

Vertical blinds
Start with 11 scanlines gone :S
Can go as high as 28 lines!  Music player registered 24 lines whilst script system 4 lines

Erase lines = 5 scanlines
Draw bars = 48 scanlines!!
Copy linear buffers to screen = 10 scanlines
= 63 scanlines total not including music
vblank = 56 scanlines all in

287 = VC=0 SC=1
288 = VC=1 SC=0

So effectively all FX update must be in 28 scanlines!

Options for vblinds
- Draw directly to screen buffer line - removes 10 scanline copy
  - Still need 5 scanlines to erase 2x lines of screen buffer
  - Optimise line drawing to take half the amount of time?! (Seems unlikely?)

- Or find a way to use the dead time inside the screen loop
  - Can draw to a different screen buffer and double buffer 1x row
  - How to make the bar drawing constant time inside the frame loop?

Proposal - DONE
- Draw bars to linear 8bpp frame buffer line during update (variable)
- Double buffer copy to screen during draw fn at constant time

LOOKS LIKE WE LOSE SYNC WHEN SWITCHING BETWEEN HIGH & LOW FREQUENCY UL
(understandably) - MEANS WE'LL HAVE TO STAY IN HIGH FREQUENCY MODE

Might make some FX harder, e.g. checkerboard (or use sparingly...?!)
Ideally would use MODE 1 and dither checks in different colours then 
switch between odd/even frame buffers on raster

Would need to draw 4x screen buffer lines in vblank as can't do work
in raster period since need to swap buffers often when N is small :\

In MODE 1, 80 cols x 4 = 320 bytes
Or do this in MODE 2 as simpler masking? Or even just do byte alignment
as vertical is going to be two row aligned? Might be able to blit these
out in different colours and set colours at raster time to isolate
individual boxes? - Put on the backlog!

Dither
4x4 ordered dither in 0 to 16, need 4 rows

Float
Float text up the screen with increasing ripples
Write small (8x8 or 16x8) font into the screen buffer spread across
8 character rows then move these up the screen from bottom to top,
repeating lines as necessary to stretch and bend the words
Can only (easily) have 32 char rows without resorting to SHADOW
Could then repeat some of the scanlines at the bottom as a mirror
(with colour change to blue or hatched blue)
MODE 2 or MODE 1?

Logo
Looks like Teletext but with a Twist :)
4x raster FX
- horizontal sinewave shift
- horizontal random shift "static"
- vertical line swap "glitch"
- vertical logo flip "spin"

RANDOM IDEA:
- Horizontal twist by having colours 1-15 in vertical strips across MODE 2 screen then set palette per scanline as appropriate: https://youtu.be/4Ma3X3YrtBE?t=3m4s
https://youtu.be/7maJ-ZaiAIo?t=43s

Simple text FX
- Plot static text with hatching 2x colours for fg & bg and animate palette: https://youtu.be/q53FIfd8r5Q?t=36s
Could turn the boxrot part into this to make it more interesting?

MONGOLIA TUNE
~~~
Total duration 3m 33s - perfect!
Pattern 1 0:00 - 0:19 = 19s

Bitshifters presents
A demo for NOVA
Called <something> :)

Pattern 2 0:19 - 0:34 = 15s

<Things start to go rastery>

Drums kick in 0:34 - 0:42 = 8s

<High energy FX for drums - maybe checker zoom?>

Pattern 3 0:42 - 0:57 = 15s

<FX 1 - variation 1>
<short text?>

Pattern 4 0:57 - 1:12 = 15s

<FX 1 - variation 2>
<short text?>

High part 1:12 - 1:20 = 8s

Long bit A 1:20 - 1:51 = 31s

<FX x3 variations>

Long bit B 1:51 - 2:22 = 31s

<FX x3 variations>

Drums disappear 2:22 - 3:00 = 38s

<Credits, greetz, thanx?>
Building energy here?

Drums kick in again 3:00 - 3:31 = 31s

<Plasma?>

Final chords 3:31 - 3:33 = 2s + silence

<Copper?>


Parallax
~~~
Variations:
- straight bars, linear motion
- straight bars, sine motion (not full sinewave so shift over time)
- sine wavey bars, linear motion
- sine wavey bars, sine motion
- alternating scanlines at different offsets for both
- colours

Twister
~~~
Angle of twister 0-127
Top can spin linearly or accelerate/decelerate via sine curve
Want energy to propagate up & down the twister in a non-linear fashion
Row increment = 0 <- straight (each row the same)
Row increment = 1 <- static twist

Propagate line 0 delta to line 1 etc.
This is what the accumulator code was previously
Propogate a fraction of the twist amount to the following line

PICO ex:for y = 0, 127 do
		a = cos(t/300+y/2000)*1

		x1 = 14+sin(a)*xl
		x2 = 14+sin(a+0.25)*xl
		x3 = 14+sin(a+0.50)*xl
		x4 = 14+sin(a+0.75)*xl
	
		xm = cos((t/80)-y+20*sin(t/20000+a/(120+20*sin(t/100+y/500))))*16
	
		if (x1 < x2) then
			hline (xm+0x12+x1,xm+0x12+x2,y,0x98)
		end
		if (x2 < x3) then
			hline (xm+0x12+x2,xm+0x12+x3,y,0xba)
		end
		if (x3 < x4) then
			hline (xm+0x12+x3,xm+0x12+x4,y,0xdc)
		end
		if (x4 < x1) then
			hline (xm+0x12+x4,xm+0x12+x1,y,0xef)
		end
	end

Amiga BASIC example - add y/amplitude
60 LET x1=((SIN((y/amp)+ang))*100)+xoff

Can also move top of Twister left & right but will be in whole bytes...

Top speed = 128/256 = 0.5 brot/f
Amp = 256/64 = 4 rows/brot
256 rows / 4 = 64 brots = 180 degree twist from top to bottom

Assuming top rotates at constant speed
If we want the Twister to have knots in it then need multiple twists
but at different amplitudes down the string
Amplitude would cycle from 0 (flat) to maybe &400 max and back again
t/large = vary slowly over time

Keep amp fairly constant but vary more slowly than 256 frames = 5.12 secs
Need something in the 1000's

d=|x0 - x1|
x1 = x0 + min(f,d)

Seem to have arrived at "something" that works and is somewhat understandable.

Each row has a rotation angle 0-127 (0 - 360 degrees)

Top row rotation angle is updated per frame by an amount 
'velocity' (twist) indexed from the table twister_frame_vel_LO|HI

The index twister_frame_vel_idx is updated by a speed variable
twister_frame_vel_idx_speed

So if the index speed is 0 then the 'velocity' (twist) of the top row
doesn't change frame-to-frame (it may or may not be 0 itself)

The rotation angle between each row is updated by an amount
'velocity' (twist) indexed from the table twister_row_vel_LO|HI

The index twister_row_vel_idx is updated by a speed variable
twister_row_vel_idx_frame each frame

So if the index speed is 0 then the 'velocity' (twist) of the top row
doesn't change between frames

The index twister_row_vel_idx is updated by a speed variable
twister_row_vel_idx_speed each row

So if the index speed is 0 then the 'velocity' (twist) of each row
doesn't change between rows (it may or may not be 0 itself)

Might be easier to just have targets for velocity and use acceleration
functions to reach those targets, rather than look up in a table?

Table useful for enabling variable twist along the whole column

More sensible naming convention: spin / twist / knot

Text
~~~
Prefered interface: define block of text with a simple data format
E.g.
EQUS x, y, "text", 0
EQUS x, y, "text", 0
EQUB &FF

Then specify which block required by enum in sequence
Also specify how the block appears max 1x glyph per frame?
To do this would need to define entire screens, so

.screen1
EQUS "0123456789"
EQUS "0123456789"
EQUS "0123456789"
EQUS "0123456789"
EQUS "0123456789"
EQUS "0123456789"
EQUS "0123456789"
EQUS "0123456789"

As would then increment the x,y over update fn.

OK
9590 : STA FE01      >r crtc
    CRTC registers :
    Index=9
    R0 =7F  R1 =50  R2 =62  R3 =28  R4 =26  R5 =00  R6 =20  R7 =23  R8 =30
    R9 =07  R10=20  R11=08  R12=06  R13=50  R14=29  R15=B8  R16=00  R17=00
    VC=0 SC=0 HC=7 MA=0657 scrx=384 scry=32

Parallax breaks on real HW if Kefrens comes before it
Behaviour is same as if put a 1 scanline delay at the start of the draw
So suggests that draw timer is coming 1 line late after Kefrens
Maybe the theory about latching in CRTC is correct, so because it's a single
scanline "frame" setting R4 is ignored for that row/frame so we're getting
an extra scanline = 313
In theory just need to remove the +1's from the end of the draw fn in Kefrens
(And see all the other fx...)

Would love to drop the smiley and have it bounce...
Vertical adjust...

yoff=0 R5=8: means 8 scanlines at top border
yoff=1 R5=7: means 7 scanlines at top border
..
yoff=7 R5=1: means 1 scanline at top border
always turn display on 8 scanlines from top of screen

So R5=8-yoff for vsync cycle
And R5=yoff for display cycle

Display portion is new crtc cycle
Draw fn will arrive at scaline 0 during vsync cycle
Wait 8 scanlines then turn on screen
Configure display cycle
30 rows + yoff vadjust, all visible, no vsync
Set screen address for status

Wait 30 rows until end of cycle
VSync cycle
39-31 rows + 8-yoff vadjust, display 1, vsync at 35-31
Set screen address for displayed area

Plasma
~~~
Rather than size + offset need to think as one continue field of bars of
decreasing size, so just one large offset!

32 rows x 80 characters each = 2560 = &A00 characters
A 16-bit offset is sufficient

No reason to have large tubes to small tubes - can mix them together!

bounce
FX init &29B9
#1 &29CD = 20 = 
#2 &29EF = 54 = 34 =
#3 &2A09 = 80 = 26 = 8
#4 &2A1B = 98 = 18 = 8
#5 &2A25 = 108 = 10 = 8
#6 &2A27 = 110 = 2 = 8

Post-Mortem
~~~
*GOOD*
Doing prototypes / doodles when not under time or release pressure is good (started some in July 2017.) Can then pick most promising ones as starting point for making a new prod.

Starting early and having a "schedule". Started after Easter (after POP) and had about 10 weeks total - this gave enough slack to accomodate RL. Also having a date for stopping developing new FX (~6 weeks) to then concentrate on sequence and polish (~4 weeks) meant final prod quality was high.

Clearly defining how the FX module interface worked - requirements & expectations of init, update, draw and kill fns meant parts could be resequenced (mostly) without unexpected consequences or bugs.

Approach of raster timed code allowed some very impressive full screen FX running at 50Hz all based on the same framework.

Reusing existing libraries from previous prods (inc. POP) meant it was quick to scale out from individual prototypes to a demo of many parts: particularly vgm player, scripting, disc loading, SWRAM / memory management, Pucrunch compression.

Recording a video capture from real hardware ahead of the compo meant no party coding required (as fun as that was for Teletextr) so avoided any last minute panic with bugs or problems on real hardware.

Simon's ST YM music converter was a big win as it allowed him to choose a really awesome tune for the demo from a large collection, not just the smaller selection of SMS game tunes or BotB ditties. We got lots of recognition for the iconic Mad Max tune and props for the quality of the port.

Getting constructive feedback on the FX from IP & Simon and not being too precious about it. :)

Getting IP to patiently explain Tracker BPM (again) meant timing to patterns became trivial and improved the feel of the demo instantly whilst making the sequence script substantially simpler.

Asking Dethmunk to contribute screens helped give the demo an identity and theme (Twisted Brain was his title.)


*BAD*
Even though the FX had a defined module interface, the complexity of the approach and exact cycle-timing requirements meant it was hard to enable anyone else to contribute their own FX, RL availability notwithstanding. Teletextr was a more enjoyably collaborative effort.

Dithered (no pun intended ;) over the name for a long time and anxed whether there was a consistent theme to the production rather than it being a random bag of prototypes. (Perhaps crawl, walk, run?)

Still painful to produce techical artwork for demos. The BASIC programs used to generate pre-rendered frame buffers are undocumented and arcane, sometimes hacked up and lost. Some of the frame buffers took an unnecessarily long time to render in the emulator. There is no reproducible build of all the art assets for the prod (unlike the music) - everything is just "magic" binaries.

Painful and slow to keep testing the sequence towards the end. My NULA build of b-em only runs ~200% speed at full tilt, so even ffwd in emulator takes many minutes if wanting to test the final parts. Pressing N skips through the script in DEBUG but doesn't skip the music with it so no good for testing music sync.

The end of the demo wasn't quite right. Having an unexpected bonus (Smiley drop) is fine for the private audience (will make them smile) but the party crowd didn't know if the demo had finished or not (had already cheered on the "thanks for watching" screen.)

Required a custom build of b-em for full CRTC timing debugging which would have made it difficult for others to make FX modules.

As awesome as the music was, it was still a borrowed tune. Would be nice to make a demo in which the music & FX are created hand-in-hand together.


*NEXT TIME*
Invest time in improved music player that understands Tracker patterns better to allow jumping (forward) in the sequence more easily.

Having a music player that runs in more constant time would be helpful (Exo can be very spikey - ended up with 10+ scanline polls every 3 frames.)

Get a faster build of b-em? And/or get custom debugging info pushed into main release so don't need custom build.

Invest time in learning Python and use scripts to generate technical art rather than BBC BASIC in the emulator. Need a nice BBC screen buffer module? Make art build reproducible and documented.


NULA VERSION
. Bitshifters logo - meant to look like MODE 7 so leave it!
. Text - could do much smoother gradiant w/out dither
. Brain picture - ask John to redraw in 12-bit palette?
. Checkerboard - could probably do any colour combos - pulse?
. VBlinds - grey or colour gradient?
. Kefrens - make bars look rounded in one colour - switch colours each variation
. Twister - nicer colour combos?
. Copper - do this without dithering just palette interpolation?
. Parallax - move to MODE 2 and have smooth vertical bars - how many pixels / colours?
. Plasma - do this without dithering just grey scale in MODE 2?
. Smiley - ask John to redraw in 12-bit palette?


MORE POSSIBLE CRTC EFFECTS
- Scrolling checkerboard floor (Lost Boys for Simon :)
- Wavey width checkerboard
- Wavey Twister (moves across full width of screen)
- Textured Twister
- Mode R (horizontal interlace high colour display from CPC)
    - Standard approach is MODE 2
    - What about MODE 1 w/ or w/out partial palette programming?
- Full screen interference using interlace mode
    (Display different offset images on alternate fields)
- Large circles / shapes using Kefrens scanline build up
- Parallax srolltexts (fast & slow character rows)
- Zoom scroller (vertical with CRTC, horizontal in sw)
