Idea 9: Palette Animation + Raster Smoothing
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Can we use scanline timed palette switching to animate things in different directions at different speeds?
chunky mode or mode 7 as is
repeat a pattern in quarters or eighths of the screen so palette animation fills screen (zooming effects)
could probably do a vertical twisting scroller in amount of time have to write bytes per frame (MODE 4 or 5)
even a very narrow one in MODE 1 as 32 byte column x 80 columns = 2560 bytes
or do every other column and use horizontal scrolling to double up the columns for free / delay effect?

Can't do X position accurate palette switching due to interrupts (unless someone on the forum can tell me
how to get things rock steady)  --> Tried RTW's latched timer and is not rock solid per scanline
Regardless, when changing palette it only seems to affect the entire character (unless this is an emulator artefact)
NO: this still replicates on a real BBC

could we do flexible square animation using per-scanline palette switching (simulate full screen effects with palette)
(change bg color on & off at exact point in scanline according to scrolling table?  would need very exact timing!)
(use mode 2 where only need to write palette once.  sta; nop; .. nop; stx  to turn on & off.)
--> doesn't appear possible to do exact mid-scanline palette switching - get jitter
--> palette change only seems to take effect at 8-pixel boundaries anyway - likely to be an artefact of the way
    that the video chip scans out the data - high/low frequency and effectively always 4 bpp

Investigte concept of raster smoothing from C64 demo scene?  (Point interrupt handlers into executing code to absorb NOPs?)

I wonder if you could implement a stable raster by using both timer 1 and timer 2 latched to the same value (set these
one after the other so timer 2 runs a "fixed" number of cycles behind timer 1) then read the timer 2 low byte value in
the interrupt handler when timer 1 lands and determine jitter from delta.

4/7/17
Interupt timing depends on how many cycles the current instructions requires to complete 2/3/4/5/6 etc.
Interupt can only be triggered once instruction has finished, but the raster never sleeps, so end up with
callback at a different point in the horizontal line.  Don't forget timer latch happens regardless

Default OS interupt handler takes 19c but can only have 128c in total for one scanline and need some instructions
to service the interupt yourself.

Can read the lower byte of the timer to see how long has elapsed since the timer was latched and use this for...
RASTER SMOOTHING!

	SEC							; 2c
	LDA #&25					; 2c largest observed
	SBC &FE44					; 4c timer 1 low byte
	; larger number = less time passed -> more NOPs -> nearer branch
	; smaller number = more time passed -> fewer NOPs -> longer branch
	STA branch+1				; 4c
	.branch
	BNE branch					; 3c

	NOP
	NOP
	NOP
	NOP							; min 2c max 8c

But need to take care for what is the largest & smallest values that can be found when entering the callback
As the timer is only 1Mhz but the CPU is 2MHz I'm not sure how this smooths the raster as doesn't account for
opcodes with an odd number of cycles.  Again, the ULA processes pixels at 2MHz in high frequency mode so can't
be that only need to stablise to 1MHz i.e. 2 cycle accuracy.  Odd.

Also note that reading 6522 happens at 1MHz so may take longer than 4 cycles - not tested this!

Idea!
Use interupt disabled vsync wait
Set timer for exactly start of first scanline
No interupt callback or use just an RTI
Do useful work that takes less than retrace period
Do interupt disabled wait for timer 1 ala vsync
Now executing code along scanline in perfect time!
64us = 128c per scanline - need code that exactly matches this for each line

Raster Scroller
80 columns = 80 bytes per scanline at ULA high frequency = 80 cycles
In theory can do 10 individual columns per scanline by doing LDA addr,X: STA palette  ; 8c = 8 columns
Ten consecutive times = 80c then just need to ensure the code equals 128c
Could end up with 10x256 individually addressable chunky raster pixels - each our 8 columns wide
Could also shift each scanline left & right be a single column at a time
(Potentially also multiple scrollers simultaneously but at increased pixel size)

Single Scanline Kefrens Bars
Individual functions that plot one line at a given X position - all take same cycle time
At start of each scanline need to wait until raster has passed X coordinate then call appropriate fn
Wait X cycles = X columns -> use NOP jump
Draw column
Wait 128 - X - draw cycles -> use NOP jump
Need CRTC cycles reset as well at some point in the line


Cycle stretching?  Does access to serial chip happen at 1MHz?
Slowdown? b-em suggests FE00 (crtc), FE40 (sysvia), FE60 (usrvia), FEC0
Looks like these reads/writes force an even number of cycles - not constant time

From RTW:
When I was getting the timing right on jsbeeb, I created this document which may help a little (it just shows various results of my test code, cycle-by-cycle). https://docs.google.com/spreadsheets/d/1y8IH7EHkE1YdUen9JisxLEmNXIeGKBTSNhmlf2uFnX0

Basically, all you need to know is that any load or store instruction addressing 1MHz hardware (i.e. anything in the ranges &FE0x, &FE1x, &FE4x, &FE6x, &FECx) will incur an additional 1 or 2 cycles, depending on the phase it was executed at.

A RMW instruction will always take either 3 or 4 additional cycles; the first will be an extra 1 or 2 depending on the phase, but the subsequent 2 writes will already be phase-aligned and will always incur just an extra cycle each.

In b-em, column 0 is scrx=328
Remember that scrx is only valid when inside visible area
VC=vertical char (row), HC=horizontal char (column), SC=scanline, MA=memory address char (*8 for actual address)

delay=10us timer1 @ VC=1/0 HC=0, red @ VC=1/0 HC=10
delay=14-11us timer1 @ VC=0/7 HC=120, red @ VC=1/0 HC=2
delay=15us timer1 @ VC=0/7 HC=112, red @ VC=0/7 HC=122
all 64 pixels apart = 8 columns = 8c = 4us

Is this the granularity of having 2x cycle stretched instructions?

Remove cycle stretched LDA after timer test
delay=10us time1 @ VC=0/7 HC=120/122/124/126

Cycle stretched has effect of rounding up next nearest 8c = 4us = 4c @ 1Mhz ?
Does this put our vsync wait into different phase at top of the loop?!

Add cycle stretched LDA back and add 3x NOPs for targeting HC=0 for red (in theory)
delay=15us timer1 @ VC=0/7 HC=112, red @ VC=0/7 HC=122
becomes
delay=15us timer1 @ VC=0/7 HC=110/112/114/116

4x NOPs is stable again.  So can only stabilise to 8c or 4us.  Hmmm.
Our low byte timer doesn't help us here either!

Theory - we can never know if we are on an odd or even number of cycles in running code
Sometimes the timer lands on an odd cycle, sometimes an even cycle
Because crtc updates one character per cycle we land on different character at different times
Interestingly my real Master interupt arrives 2 cycles earlier than b-em


Random idea: can map a sprite around a rotating cylinder viewed directly on - can specify which
scan line to display from a table that maps according to sin with an offset.
(Not explained very well.)

Also nice wibbly per line effect - just have a single but very long line and offset into that on
a per scanline basis.  Probably need N versions for a per pixel offset.
